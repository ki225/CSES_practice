＊＊題意：
    一次要從頭和尾選一個數字，求出最大總和。

＊＊注意：
    下一個人可以選的頭尾兩數字也要納入自己選擇的考量。例如：3 5 2 2，若你選了 3 ，則下一個人可以選擇數字更大的 5 ，這時候你就虧了。

＊＊解決方法：
    考量選擇何者時，可以把下一個人的選擇結果放進去： 你獲得的 - 對方會獲得的

＊＊範例：
0   5   3   4

dp[0][1] = max( dp[0][0] , dp[1][1]) - min( dp[0][0] , dp[1][1] ) = max( dp[0][0] - dp[1][1], dp[1][1] - dp[0][0] ) = dp[1][1] - dp[0][0] = 5 = 甲得到的 - 乙得到的 = 甲乙差距
dp[1][2] = max( dp[1][1] , dp[2][2]) - min( dp[1][1] , dp[2][2] = dp[1][1] - dp[2][2] = 2
dp[2][3] = max( dp[2][2] , dp[3][3]) - min( dp[2][2] , dp[3][3] = dp[3][3] - dp[2][2] = 1

dp[0][2] = max( dp[0][0] - dp[1][2] , dp[2][2] - dp[0][1]) = max(0-2,3-5) = -2
dp[1][3] = max( dp[1][1] - dp[2][3] , dp[3][3] - dp[1][2]) = max(5-1,4-2) = 4

dp[0][3] = max( dp[0][0] - dp[1][3] , dp[3][3] - dp[0][2]) = max( 0-4 ,4-(-2) ) = 6

S1 = [ (S1+S2) + (S1-S2) ] / 2 = [(0+5+3+4) + 6] / 2 = 18 / 2 = 9
也就是取 5 和 4 的總和

＊＊解釋：
    1.  dp[x][y] 代表區間 [x,y]下，甲和乙的差距，也就是S1-S2的概念。所以算到最後不能輸出 dp[0][length-1]，因為這代表的是甲乙的差距，而我們要求的是甲或乙的總和。
    2.  dp[x][y] 並不一定是第一個拿數字的人，可能是甲或乙。
        拿dp[0][3] = 6 為例子，dp[0][3]若為甲和乙的最大差距（S甲 - Ｓ乙），則 dp[1][3] 或 dp[0][2] 就是上一次拿數字時，乙和甲的差距（Ｓ乙 - Ｓ甲）。
    3.  所求為 S1。所有數字為S1+S2，dp[0][length]為區間[0,length-1]裡 S1-S2 的值。

＊＊reference:
https://www.youtube.com/watch?v=DMkXbGm4g6o
