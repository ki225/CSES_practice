學到的東西：

** 迭代器
  1.  迭代器是一个变量，相当于容器和操纵容器的算法之间的中介。迭代器可以指向容器中的某个元素，通过迭代器就可以读写它指向的元素。
  2.  宣告
      (1)正向迭代器：     容器类名::iterator  迭代器名;
      (2)常量正向迭代器：   容器类名::const_iterator  迭代器名;
      (3)反向迭代器：     容器类名::reverse_iterator  迭代器名;
      (4)常量反向迭代器：   容器类名::const_reverse_iterator  迭代器名;
  3.  範例
  
      vector<int> v;                                  //  v是存放int类型变量的可变长数组，开始时没有元素
      for (int n = 0; n<5; ++n)
          v.push_back(n);                            //  push_back成员函数在vector容器尾部添加一个元素
                                                     
      vector<int>::iterator i;                      //  定义正向迭代器
      for (i = v.begin(); i != v.end(); ++i) {      //用迭代器遍历容器
          cout << *i << " ";                        //  *i 就是迭代器i指向的元素
          *i *= 2;                                  //每个元素变为原来的2倍
      }
      cout << endl;
      
      for (vector<int>::reverse_iterator j = v.rbegin(); j != v.rend(); ++j)      //用反向迭代器遍历容器
          cout << *j << " ";

** set
  1.遍歷：
  
     (1)
        for (const auto &s : lightSet) {
            cout << s << " ";
        }
        
     (2)
        for(set<int>::iterator it=numSet.begin() ;it!=numSet.end();it++)
        {
            cout<< *it <<" occurs "<<endl;
        }
  2.  erase()內要放的是位置，例如：
      (1)dis.erase(dis.find(*it - *--it)); 
      
      (2)size_type erase (const value_type& val); //删除 set 容器中值为 val 的元素    ======>回傳成功刪除特定value的變數數量
      
        int num = myset.erase(2); //删除元素 2，myset={1,3,4,5}
        cout << "1、myset size = " << myset.size() << endl;
        cout << "num = " << num << endl;

      (3)iterator  erase (const_iterator position); //删除 position 迭代器指向的元素      ==========>回傳迭代器，其指向的是 set 容器中删除元素之后的第一个元素。
     
        set<int>::iterator iter = myset.erase(myset.begin()); //删除元素 1，myset={3,4,5}
        cout << "2、myset size = " << myset.size() << endl;
        cout << "iter->" << *iter << endl;
        
      (4)iterator  erase (const_iterator first, const_iterator last); //删除 [first,last) 区间内的所有元素    ============>回傳迭代器，其指向的是 set 容器中删除元素之后的第一个元素。

        set<int>::iterator iter2 = myset.erase(myset.begin(), --myset.end());//删除元素 3,4，myset={5}
        cout << "3、myset size = " << myset.size() << endl;
        cout << "iter2->" << *iter2 << endl;
      
      
  3.  find(),upper_bound(),lower_bound() 內放的是數值。比方說要找value為1的位置，就可以 find(1)。他們的回傳值為一個位置，所以要取得value的話，要加'*'


**  ++ , --
  --a和a--差別：
  --a是先減並改變a，回傳的時候是回傳已經-1的a
  a--是先回傳a，再使 a=a-1


** multiset vs set
  1.  multiset
      (1)可以存相同數值的資料
      (2)會按照數值大小排好
      (3) #include <set>
      (4) multiset <型態> 名稱
  2.  set
      (1)相同數值的資料只會出現一次
      (2)會按照數值大小排好
      (3) #include <set>
      (4) set <型態> 名稱
======================================================================================================================================
解題想法：
    設原本有長度為8的路，存放長度的 dis_set = {8-0} = {8}
    
   0  1   2   3   4   5   6   7   8
    -   -   -   -   -   -   -   -
    
    第一步在3的位置放了一個路燈，則 dis_set = {3-0 , 8-3} = {3,5}(把8拿出來)
    
   0  1   2   3   4   5   6   7   8
    -   -   - | -   -   -   -   -
    
    第二步在6的位置放了路燈， dis_set = {3 , 6-3 , 8-6} = {3,3,2}（把5拿出來） = {2,3,3}(multiset會排序)
   0  1   2   3   4   5   6   7   8
    -   -   - | -   -   - | -   -


解題過程：
    1.原本的解法：
    for(int i=0;i<n;i++){
        
        int light;
        cin >> light;
        
        int low = *lightSet.lower_bound(light); //一直得到比light還大的值，不然就是和目標值相同的值，無法找到比較小的
        int upper = *lightSet.upper_bound(light);
        
        dis.erase(dis.find(upper-low)); 
        dis.insert(light-low);
        dis.insert(upper-light);

        cout << *dis.rbegin() << endl; 
        lightSet.insert(light);
    }
    結論：就不用lower_bound了
    
    2.第二次：
    //問題在於 set裡面無法出現重複元素，所以是掉一個元素就沒了（即便理論而言他要重複）
    for(int i=0;i<n;i++){
        
        int light;
        cin >> light;
        auto it = lightSet.upper_bound(light);
       
        dis.erase(dis.find(*it - *--it)); //刪除舊的距離 //此時 it=it-1，所以等等使用 it要加一
        dis.insert(light - *it++); //要扣除的數字為lower_bound 所以用原本減一後的it即可
        dis.insert(*it-light);

        for (const auto &s : dis) {
            cout << s << " ";
        }
        cout << "\n";

        cout << *dis.rbegin() << endl; //印出距離set最後的字（也就是長度最長的）
        lightSet.insert(light);
    }

======================================================================================================================================
Reference:
  1.  STL之五：set/multiset用法详解: https://blog.csdn.net/longshengguoji/article/details/8546286
  2.  c++ set使用（增删查遍历）： https://blog.csdn.net/ktigerhero3/article/details/78273497
  3.  C++迭代器（STL迭代器）iterator详解： http://c.biancheng.net/view/338.html
  4.  C++ STL set容器完全攻略（超级详细）:  http://c.biancheng.net/view/7192.html
  5.  C++ STL set删除数据：erase()和clear()方法:  http://c.biancheng.net/view/7198.html
