看完 playlistReference.cpp 的收穫：

＊＊unordered_map vs map
1.  unordered_map就是沒有排序的 map。 (map的 key值會自動排序)
2.  unordered_map更有效率

reference: 
    https://www.geeksforgeeks.org/map-vs-unordered_map-c/


＊＊ios::sync_with_stdio(0), cin.tie(0) 用處
1.  因為 cin ,cout 會擺輸入輸出的東西先放入緩衝區再輸出，所以效率變低。
    若打這個指令就可以打消 iostream的輸入輸出緩存，進而節省時間（更接近 scanf ,printf效率）
2.  默認情況裡，cin 和 cout綁定。tie(0) （0表示NULL）可以解除cin 和cout 的綁定。

reference:
    https://blog.csdn.net/u014665013/article/details/70521300
    https://hackmd.io/@wiwiho/CPN-io-optimization

=====================================================================================
小思考收穫：
＊＊三元運算子
    1.  if-else精簡版，可以表示成：   條件式 ? 條件式為true時執行的陳述句 : 條件式為false時執行的陳述句
    2.  例子（來源自下網頁）：
    
        if (flag)
            ret = a;    ＝＝＝＝＝>      ret = flag ? a : b;
        else
            ret = b;
            
＊＊更改一：
int main() {
    ios::sync_with_stdio(0), cin.tie(0);
    int n, start = 0, ans = 0, temp;
    cin >> n;

    for (int i = 1; i <= n; i++) {
        cin >> temp;
        start = mp[temp] ==0? start : mp[temp];         ＊＊原本為   start = max(start, mp[temp]);
        ans = max(ans, i - start ); //第一個ans會是0
        mp[temp] = i ;
    }

    cout << ans << "\n";
    return 0;
}

例子：
    10
    1 1 2 2 4 5 6 2 4 1
    更改過後輸出是8，未更改的輸出是5。
    
    原因是答案變成最後一個1和倒數第二個1的index相差值。
    在index=8(輸入數字為4)時，start值為5(現在5的位置)；到index=9(輸入數字為1)，start卻變成mp[1]的值（也就是2），此時的ans值為最大值，所以就成了答案。
    
    也就是說，即使內部有重複數字，也會因為包夾他們的兩個相同數字而影響答案。如：1 2 3 2 1 出來的答案為最外層兩個1的index之差。
    
reference:
    https://shengyu7697.github.io/cpp-ternary-operator/
